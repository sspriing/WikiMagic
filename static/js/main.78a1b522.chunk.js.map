{"version":3,"sources":["lib/FirebaseData.tsx","components/Input.tsx","components/RenderData.tsx","components/TodayData.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getDate","today","Date","dd","String","padStart","mm","getMonth","getFullYear","Input","cat","useState","age","setAge","price","setPrice","category","setCategory","cnt","setCnt","totalPrice","setTP","warnning","setWranning","data","time","value","id","className","onChange","e","target","name","placeholder","parseInt","console","log","type","onClick","undefined","date","now","getHours","getMinutes","getSeconds","getTime","db","collection","doc","set","get","then","window","location","reload","ts","TodayData","int","snapshot","forEach","itemList","document","querySelector","todaySold","li","createElement","number","del","delBtn","setAttribute","addEventListener","delete","setTimeout","textContent","slice","appendChild","toString","renderItem","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uQAEO,SAASA,IACZ,IAAIC,EAAQ,IAAIC,KACZC,EAAKC,OAAOH,EAAMD,WAAWK,SAAS,EAAE,KACxCC,EAAKF,OAAOH,EAAMM,WAAW,GAAGF,SAAS,EAAE,KAE/C,OADWJ,EAAMO,cACJ,IAAIF,EAAG,IAAIH,ECoHbM,MAtHf,WAAiB,IAkBTC,EAlBQ,EACUC,mBAAS,gBADnB,mBACLC,EADK,KACAC,EADA,OAEcF,mBAAS,GAFvB,mBAELG,EAFK,KAEEC,EAFF,OAGoBJ,mBAAS,gBAH7B,mBAGLK,EAHK,KAGKC,EAHL,OAIUN,mBAAS,GAJnB,mBAILO,EAJK,KAIAC,EAJA,OAKgBR,mBAAS,GALzB,mBAKLS,EALK,KAKOC,EALP,OAMoBV,mBAAS,IAN7B,mBAMLW,EANK,KAMKC,EANL,OAOoBZ,mBAAS,IAP7B,mBASRa,GATQ,UASD,CACPC,KAAM,GACNb,IAAKA,EACLI,SAAUA,EACVF,MAAOA,EACPI,IAAKA,EACLE,WAAYA,IA8DhB,MA1DW,iBAARR,IACCF,EACI,kBAAC,WAAD,KACI,4BAAQgB,MAAQ,gBAAhB,gBACA,4BAAQA,MAAQ,gBAAhB,gBACA,4BAAQA,MAAQ,4BAAhB,4BACA,4BAAQA,MAAQ,4BAAhB,4BACA,4BAAQA,MAAQ,sBAAhB,sBACA,4BAAQA,MAAQ,2CAAhB,2CACA,4BAAQA,MAAQ,gBAAhB,gBACA,4BAAQA,MAAQ,sBAAhB,sBACA,4BAAQA,MAAQ,sBAAhB,sBACA,4BAAQA,MAAQ,iDAAhB,mDAGD,iBAARd,IACCF,EACA,kBAAC,WAAD,KACI,4BAAQgB,MAAQ,gBAAhB,gBACA,4BAAQA,MAAQ,gBAAhB,gBACA,4BAAQA,MAAQ,4BAAhB,4BACA,4BAAQA,MAAQ,4BAAhB,4BACA,4BAAQA,MAAQ,sBAAhB,sBACA,4BAAQA,MAAQ,gBAAhB,gBACA,4BAAQA,MAAQ,gBAAhB,gBACA,4BAAQA,MAAQ,gBAAhB,kBAkCJ,kBAAC,WAAD,KAEQ,4BAAQC,GAAK,MAAMC,UAAY,aAAaC,SAAa,SAACC,GAAK,IAAD,EACtCA,EAAEC,OAAXL,GAD+C,EACrDM,KADqD,EAC/CN,OACXb,EAAOa,KAEP,4BAAQA,MAAQ,gBAAhB,gBACA,4BAAQA,MAAQ,gBAAhB,iBAGJ,4BAAQC,GAAK,WAAWC,UAAY,WAAWC,SAAa,SAACC,GAAK,IAAD,EACzCA,EAAEC,OAAXL,GADkD,EACxDM,KADwD,EAClDN,OACXT,EAAYS,KAEXhB,GAGL,kBAAC,IAAD,CAAaiB,GAAK,QAAQM,YAAc,oDAAYJ,SAAY,SAACC,GAC7Df,EAASmB,SAASJ,EAAEC,OAAOL,QAC3BL,EAAMa,SAASJ,EAAEC,OAAOL,OAAOR,GAC/BiB,QAAQC,IAAItB,GACZqB,QAAQC,IAAIlB,GACZiB,QAAQC,IAAIhB,MAEhB,kBAAC,IAAD,CAAaO,GAAK,MAAMM,YAAc,oDAAYJ,SAAY,SAACC,GAC3DX,EAAOe,SAASJ,EAAEC,OAAOL,QACzBL,EAAMP,EAAMoB,SAASJ,EAAEC,OAAOL,QAC9BS,QAAQC,IAAItB,GACZqB,QAAQC,IAAIlB,GACZiB,QAAQC,IAAIhB,MAEhB,yBAAKO,GAAK,cAAV,wBAA+BP,EAC/B,4BAAQO,GAAK,SAASU,KAAO,SAASC,QA9DlD,WACI,QAAaC,IAAVzB,QAA+ByB,IAARrB,GAA8B,IAATJ,GAAqB,IAAPI,EAA7D,CAIA,IAAIsB,EAAOxC,IACPyB,EDlDL,WACH,IAAIgB,EAAM,IAAIvC,KAId,OAHSE,OAAOqC,EAAIC,YAAYrC,SAAS,EAAE,KAGjC,IAFDD,OAAOqC,EAAIE,cAActC,SAAS,EAAE,KAE5B,IADRD,OAAOqC,EAAIG,cAAcvC,SAAS,EAAE,KC8C9BwC,GACXrB,EAAKC,KAAOA,EAGZqB,EAAGC,WAAW,QACTC,IAAI,QACJD,WAAWP,GACXQ,IAAIvB,GACJwB,IAAI,CAACzB,SAGVsB,EAAGC,WAAW,QACTC,IAAI,QACJD,WAAWP,GACXQ,IAAIvB,GACJyB,MACAC,MACG,SAAAH,GACII,OAAOC,SAASC,QAAO,WAtB/B/B,EAAY,0EA4DR,iBAEA,yBAAKI,GAAK,YAAYL,K,iBClHlCiC,EAAK,ECsBMC,MAnBf,WACI,IAAIC,EAAM,EAYV,OAVWX,EAAGC,WAAW,QAAQC,IAAI,QAAQD,WAAW/C,KAAWkD,MAC7DC,MAAK,SAACO,GACJA,EAASC,SAAQ,SAACX,IDNvB,SAAoBA,EAAKS,GAC5B,IAAMG,EAAWC,SAASC,cAAc,SACpCC,EAAYF,SAASC,cAAc,eAEnCE,EAAKH,SAASI,cAAc,MAC5BC,EAASL,SAASI,cAAc,MAChCxC,EAAOoC,SAASI,cAAc,MAC9BjC,EAAO6B,SAASI,cAAc,MAC9B/C,EAAM2C,SAASI,cAAc,MAC7BnD,EAAQ+C,SAASI,cAAc,MAC/B7C,EAAayC,SAASI,cAAc,MACpCE,EAAMN,SAASI,cAAc,MAC7BG,EAASP,SAASI,cAAc,UAGpCD,EAAGK,aAAa,UAAWrB,EAAIrB,IAE/BuC,EAAOtC,UAAY,cACnBH,EAAKG,UAAY,YACjBI,EAAKJ,UAAY,YACjBV,EAAIU,UAAY,WAChBd,EAAMc,UAAY,aAClBR,EAAWQ,UAAY,kBACvBuC,EAAIvC,UAAY,WAChBwC,EAAOzC,GAAK,WAEZyC,EAAOE,iBAAiB,SACxB,SAAkBxC,GACdgB,EAAGC,WAAW,QAAQC,IAAI,QAAQD,WAAW/C,KAAWgD,IAAIA,EAAIrB,IAAI4C,SAEpEC,YAAW,kBAAIpB,OAAOC,SAASC,WAAS,QAJH,GAOzCC,GAAMP,EAAIxB,OAAOA,KAAKJ,WAEtB8C,EAAOO,YAAchB,EACrBhC,EAAKgD,YAAczB,EAAIrB,GAAG+C,MAAM,EAAE,GAClC1C,EAAKyC,YAAazB,EAAIxB,OAAOA,KAAKZ,IAAM,MAAOoC,EAAIxB,OAAOA,KAAKR,SAC/DE,EAAIuD,YAAczB,EAAIxB,OAAOA,KAAKN,IAClCJ,EAAM2D,YAAczB,EAAIxB,OAAOA,KAAKV,MACpCM,EAAWqD,YAAczB,EAAIxB,OAAOA,KAAKJ,WACzCgD,EAAOK,YAAY,IACnBL,EAAO1C,MAAQsB,EAAIrB,GACnBwC,EAAIQ,YAAYP,GAEhBJ,EAAGW,YAAYT,GACfF,EAAGW,YAAYlD,GACfuC,EAAGW,YAAY3C,GACfgC,EAAGW,YAAYzD,GACf8C,EAAGW,YAAY7D,GACfkD,EAAGW,YAAYvD,GACf4C,EAAGW,YAAYR,GAEP,OAARP,QAAQ,IAARA,KAAUe,YAAYX,GACnBD,IACCA,EAAUU,YAAa,wBAAWlB,EAAGqB,YC/C7BC,CAAW7B,IADXS,SAQR,kBAAC,WAAD,OCDRqB,IAASC,cAXc,CACrBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKV,IAAMzC,EAAKgC,IAASU,YA8BZC,MA5Bf,WACE,OACE,yBAAK7D,UAAU,OACX,iFACA,4BAAK5B,KACP,yBAAK4B,UAAY,cACf,kBAAC,EAAD,OAGF,yBAAKD,GAAK,WACR,uBAAGA,GAAG,cAAN,8BAA0B,kBAAC,EAAD,OAC1B,2BAAOA,GAAK,aACV,+BACE,4BACE,4CAAW,wDAAa,kDAAY,4CAAW,4CAAW,kDAAY,8CAI1E,2BAAOA,GAAK,aC7BF+D,QACW,cAA7BtC,OAAOC,SAASsC,UAEe,UAA7BvC,OAAOC,SAASsC,UAEhBvC,OAAOC,SAASsC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlC,SAASmC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpE,QAAQoE,MAAMA,EAAMC,c","file":"static/js/main.78a1b522.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport function getDate(): string{\r\n    var today = new Date()\r\n    var dd = String(today.getDate()).padStart(2,'0')\r\n    var mm = String(today.getMonth()+1).padStart(2,'0')\r\n    var yyyy = today.getFullYear();\r\n    return(yyyy+ \"-\"+mm+\"-\"+dd) \r\n}\r\nexport function getTime():string{\r\n    var now = new Date()\r\n    var hh = String(now.getHours()).padStart(2,'0')\r\n    var mm = String(now.getMinutes()).padStart(2,'0')\r\n    var ss = String(now.getSeconds()).padStart(2,'0')\r\n    return(hh+\":\"+mm+\":\"+ss)\r\n}\r\n\r\nexport function delItem(){\r\n    \r\n}\r\n","import React, {Component, Fragment, useState} from 'react';\r\nimport {db} from '../App'\r\nimport InputNumber from 'react-input-just-numbers';\r\nimport{getTime, getDate} from '../lib/FirebaseData'\r\n\r\nfunction Input(){\r\n    const [age, setAge] = useState(\"성인\");\r\n    const [price, setPrice] = useState(0);\r\n    const [category, setCategory] = useState(\"모자\");\r\n    const [cnt, setCnt] = useState(0);\r\n    const [totalPrice, setTP] = useState(0);\r\n    const [warnning, setWranning] = useState(\"\");\r\n    const [soldTime, setSoldTime] = useState(\"\")\r\n\r\n    let data = {\r\n        time: \"\",\r\n        age: age,\r\n        category: category,\r\n        price: price,\r\n        cnt: cnt,\r\n        totalPrice: totalPrice\r\n    }\r\n\r\n    var cat\r\n    if(age === \"성인\"){\r\n        cat = \r\n            <Fragment>\r\n                <option value = \"모자\">모자</option>\r\n                <option value = \"양말\">양말</option>\r\n                <option value = \"선글라스\">선글라스</option>\r\n                <option value = \"헤어밴드\">헤어밴드</option>\r\n                <option value = \"헤어핀\">헤어핀</option>\r\n                <option value = \"스카프 / 손수건\">스카프 / 손수건</option>\r\n                <option value = \"잠옷\">잠옷</option>\r\n                <option value = \"우양산\">우양산</option>\r\n                <option value = \"넥타이\">넥타이</option>\r\n                <option value = \"마스크 / 마스크줄\">마스크 / 마스크줄</option>\r\n            </Fragment>\r\n    }    \r\n    if(age === \"아동\"){\r\n        cat = \r\n        <Fragment>\r\n            <option value = \"모자\">모자</option>\r\n            <option value = \"양말\">양말</option>\r\n            <option value = \"선글라스\">선글라스</option>\r\n            <option value = \"헤어밴드\">헤어밴드</option>\r\n            <option value = \"헤어핀\">헤어핀</option>\r\n            <option value = \"반지\">반지</option>\r\n            <option value = \"가방\">가방</option>\r\n            <option value = \"기타\">기타</option>\r\n        </Fragment>\r\n    }\r\n\r\n    function sendToFirebase(){\r\n        if(price === undefined || cnt === undefined || price ===0 || cnt ===0){\r\n            setWranning(\"단가와 수량을 입력하세요\")\r\n            return;\r\n        }\r\n        var date = getDate()\r\n        var time = getTime()\r\n        data.time = time\r\n\r\n        // firebase에 저장\r\n        db.collection('wiki')\r\n            .doc('sale')\r\n            .collection(date)\r\n            .doc(time)\r\n            .set({data})\r\n\r\n        //저장이 되었는지 확인 후 reload\r\n        db.collection('wiki')\r\n            .doc('sale')\r\n            .collection(date)\r\n            .doc(time)\r\n            .get()\r\n            .then(\r\n                doc =>{\r\n                    window.location.reload(false)\r\n                }\r\n            )\r\n    }\r\n\r\n    return(\r\n        <Fragment>\r\n                \r\n                <select id = \"age\" className = \"select_age\" onChange =  {(e)=>{\r\n                    let {name, value} = e.target\r\n                    setAge(value)\r\n                    }}>\r\n                    <option value = \"성인\">성인</option>\r\n                    <option value = \"아동\">아동</option>\r\n                </select>\r\n                \r\n                <select id = \"category\" className = \"category\" onChange =  {(e)=>{\r\n                    let {name, value} = e.target\r\n                    setCategory(value)\r\n                    }}>\r\n                    {cat}\r\n                </select>\r\n\r\n                <InputNumber id = \"price\" placeholder = \"단가를 입력하세요\" onChange = {(e)=>{\r\n                    setPrice(parseInt(e.target.value))\r\n                    setTP(parseInt(e.target.value)*cnt)\r\n                    console.log(price)\r\n                    console.log(cnt)\r\n                    console.log(totalPrice)\r\n                }}></InputNumber>\r\n                <InputNumber id = \"cnt\" placeholder = \"수량을 입력하세요\" onChange = {(e)=>{\r\n                    setCnt(parseInt(e.target.value))\r\n                    setTP(price*parseInt(e.target.value))\r\n                    console.log(price)\r\n                    console.log(cnt)\r\n                    console.log(totalPrice)\r\n                }}></InputNumber>\r\n                <div id = \"totalPrice\" >총 금액: {totalPrice}\r\n                <button id = \"submit\" type = \"submit\" onClick={sendToFirebase}>입력</button>\r\n                </div>\r\n                <div id = \"warnning\">{warnning}</div>\r\n                \r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Input","import { db } from \"../App\";\r\nimport { getDate } from \"../lib/FirebaseData\";\r\n\r\nvar ts = 0\r\n\r\nexport function renderItem(doc, int){\r\n    const itemList = document.querySelector(\"#item\")\r\n    var todaySold = document.querySelector(\"#today-sold\")\r\n\r\n    let li = document.createElement('tr');\r\n    let number = document.createElement('td')\r\n    let time = document.createElement('td')\r\n    let name = document.createElement('td')\r\n    let cnt = document.createElement('td')\r\n    let price = document.createElement('td')\r\n    let totalPrice = document.createElement('td')\r\n    let del = document.createElement('td')\r\n    let delBtn = document.createElement('button')\r\n\r\n\r\n    li.setAttribute('data-id', doc.id)\r\n\r\n    number.className = \"item-number\"\r\n    time.className = \"item-time\"\r\n    name.className = \"item-name\"\r\n    cnt.className = \"item-cnt\"\r\n    price.className = \"item-price\"\r\n    totalPrice.className = \"item-totalPrice\"\r\n    del.className = \"item-del\"\r\n    delBtn.id = \"item-del\"\r\n\r\n    delBtn.addEventListener(\"click\",btnClick,false)\r\n    function btnClick(e){\r\n        db.collection('wiki').doc('sale').collection(getDate()).doc(doc.id).delete()\r\n        \r\n        setTimeout(()=>window.location.reload(),1000)\r\n    }\r\n    \r\n    ts += doc.data().data.totalPrice\r\n\r\n    number.textContent = int\r\n    time.textContent = doc.id.slice(0,5)\r\n    name.textContent= doc.data().data.age + \" - \" +doc.data().data.category\r\n    cnt.textContent = doc.data().data.cnt\r\n    price.textContent = doc.data().data.price\r\n    totalPrice.textContent = doc.data().data.totalPrice\r\n    delBtn.textContent=\"X\"\r\n    delBtn.value = doc.id\r\n    del.appendChild(delBtn)\r\n\r\n    li.appendChild(number)\r\n    li.appendChild(time)\r\n    li.appendChild(name)\r\n    li.appendChild(cnt)\r\n    li.appendChild(price)\r\n    li.appendChild(totalPrice)\r\n    li.appendChild(del)\r\n\r\n    itemList?.appendChild(li)\r\n    if(todaySold){\r\n        todaySold.textContent= \"총 매출: \" + ts.toString()\r\n    }\r\n}","import React, {Component, Fragment, useState} from 'react';\r\nimport {db} from '../App'\r\nimport {getDate} from '../lib/FirebaseData'\r\nimport { renderItem } from './RenderData';\r\nimport { useEffect } from 'react';\r\n\r\nfunction TodayData(){\r\n    let int = 0\r\n\r\n    let data = db.collection('wiki').doc('sale').collection(getDate()).get()\r\n     data.then((snapshot:any)=>{\r\n            snapshot.forEach((doc:any)=>{\r\n                int++\r\n                renderItem(doc,int)\r\n        })\r\n        }\r\n    )\r\n\r\n    \r\n    return (\r\n        <Fragment>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default TodayData","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Input from './components/Input'\r\nimport firebase from 'firebase'\r\nimport TodayData from './components/TodayData';\r\nimport { getDate, delItem } from './lib/FirebaseData';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAuMUMqkpuvevgi9pu_NM6ZqUBniwvhuQs\",\r\n  authDomain: \"wikimagic-4ce55.firebaseapp.com\",\r\n  databaseURL: \"https://wikimagic-4ce55.firebaseio.com\",\r\n  projectId: \"wikimagic-4ce55\",\r\n  storageBucket: \"wikimagic-4ce55.appspot.com\",\r\n  messagingSenderId: \"999608533978\",\r\n  appId: \"1:999608533978:web:1328133731ac663f2836e3\",\r\n  measurementId: \"G-K3WGGRGWHB\"\r\n}\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\nexport const db = firebase.firestore();\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <h2>위키매직 판매일보</h2>\r\n        <h3>{getDate()}</h3>\r\n      <div className = \"input-data\">\r\n        <Input/>\r\n      </div>\r\n      \r\n      <div id = \"content\">\r\n        <p id=\"today-sold\">오늘 매출: <TodayData/></p>\r\n        <table id = \"item-list\">\r\n          <thead>\r\n            <tr>\r\n              <th>번호</th><th>판매시간</th><th>상품명</th><th>수량</th><th>단가</th><th>총금액</th><th>삭제</th>\r\n            </tr>\r\n            \r\n          </thead>\r\n          <tbody id = \"item\"></tbody>\r\n        </table>\r\n      </div>\r\n      \r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}