{"version":3,"sources":["lib/FirebaseData.tsx","components/Input.tsx","components/TodayData.tsx","components/RenderData.tsx","components/Category.tsx","page/SoldRecord.tsx","page/Purchase.tsx","page/WritePurchaseRecord.tsx","page/ShowPurchaseRecord.tsx","components/Monthly.tsx","page/Static.tsx","App.tsx","serviceWorker.ts","index.tsx","page/wikimagic1.png"],"names":["getDate","today","Date","dd","String","padStart","mm","getMonth","getFullYear","dateToString","date","getTime","now","getHours","getMinutes","getSeconds","numberWithCommas","x","toString","replace","Input","cat","useState","age","setAge","price","setPrice","category","setCategory","cnt","setCnt","totalPrice","setTP","warnning","setWranning","setTS","data","time","a","undefined","isNaN","todaySold","document","querySelector","todaySoldInt","textContent","parseInt","console","log","db","collection","doc","set","sold","get","then","window","location","reload","value","style","width","display","id","className","onChange","e","target","name","placeholder","type","onClick","TodayData","int","snapshot","forEach","itemList","ts","li","createElement","number","del","delBtn","delete","beforePrice","setTimeout","setAttribute","addEventListener","slice","appendChild","insertBefore","firstChild","exists","renderItem","RecordCategory","ct","Map","pr","total","num","has","sorted","entries","sort","b","categorySold","key","tr","rank","RecordSold","src","logo","height","marginTop","marginBottom","borderBottom","paddingBottom","fontSize","marginLeft","Purchase","to","WritePurchaseRecord","ShowPurchaseRecord","Monthly","textAlign","Static","setDate","getElementById","innerHTML","showSales","margin","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","path","component","excat","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.543940c7.chunk.js","sourcesContent":["import React from 'react'\r\nimport { db } from \"../App\";\r\n\r\nexport function getDate():string{\r\n    var today = new Date()\r\n    var strDay: string;\r\n    var dd = String(today.getDate()).padStart(2,'0')\r\n    var mm = String(today.getMonth()+1).padStart(2,'0')\r\n    var yyyy = today.getFullYear();\r\n    strDay = yyyy+ \"-\"+mm+\"-\"+dd\r\n    return(strDay) \r\n}\r\n\r\nexport function dateToString(date:Date):string{\r\n    var strDay: string;\r\n    var dd = String(date.getDate()).padStart(2,'0')\r\n    var mm = String(date.getMonth()+1).padStart(2,'0')\r\n    var yyyy = date.getFullYear();\r\n    strDay = yyyy+ \"-\"+mm+\"-\"+dd\r\n    return(strDay) \r\n}\r\n\r\nexport function getTime():string{\r\n    var now = new Date()\r\n    var hh = String(now.getHours()).padStart(2,'0')\r\n    var mm = String(now.getMinutes()).padStart(2,'0')\r\n    var ss = String(now.getSeconds()).padStart(2,'0')\r\n    return(hh+\":\"+mm+\":\"+ss)\r\n}\r\n\r\nexport function delItem(){\r\n    \r\n}\r\n\r\nexport function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nexport function getMonthSales(month){\r\n\r\n}","import React, {Component, Fragment, useState} from 'react';\r\nimport {db} from '../App'\r\nimport InputNumber from 'react-input-just-numbers';\r\nimport{getTime, getDate, numberWithCommas} from '../lib/FirebaseData'\r\n\r\nfunction Input(){\r\n    const [age, setAge] = useState(\"성인\");\r\n    const [price, setPrice] = useState(0);\r\n    const [category, setCategory] = useState(\"모자\");\r\n    const [cnt, setCnt] = useState(0);\r\n    const [totalPrice, setTP] = useState(0);\r\n    const [warnning, setWranning] = useState(\"\");\r\n    const [ts, setTS] = useState(0)\r\n\r\n    let data = {\r\n        time: \"\",\r\n        age: age,\r\n        category: category,\r\n        price: price,\r\n        cnt: cnt,\r\n        totalPrice: totalPrice\r\n    }\r\n\r\n    var cat\r\n    if(age === \"성인\"){\r\n        cat = \r\n            <Fragment>\r\n                <option value = \"모자\">모자</option>\r\n                <option value = \"양말\">양말</option>\r\n                <option value = \"선글라스\">선글라스</option>\r\n                <option value = \"헤어밴드\">헤어밴드</option>\r\n                <option value = \"헤어핀\">헤어핀</option>\r\n                <option value = \"스카프 / 손수건\">스카프 / 손수건</option>\r\n                <option value = \"잠옷\">잠옷</option>\r\n                <option value = \"우양산\">우양산</option>\r\n                <option value = \"넥타이\">넥타이</option>\r\n                <option value = \"마스크 / 마스크줄\">마스크 / 마스크줄</option>\r\n                <option value = \"매출 누락\">매출 누락</option>\r\n            </Fragment>\r\n    }    \r\n    if(age === \"아동\"){\r\n        cat = \r\n        <Fragment>\r\n            <option value = \"모자\">모자</option>\r\n            <option value = \"양말\">양말</option>\r\n            <option value = \"선글라스\">선글라스</option>\r\n            <option value = \"헤어밴드\">헤어밴드</option>\r\n            <option value = \"헤어핀\">헤어핀</option>\r\n            <option value = \"반지\">반지</option>\r\n            <option value = \"가방\">가방</option>\r\n            <option value = \"기타\">기타</option>\r\n        </Fragment>\r\n    }\r\n\r\n    async function sendToFirebase(){\r\n        if(price === undefined || cnt === undefined || price ===0 || cnt ===0 || isNaN(price) || isNaN(cnt)){\r\n            setWranning(\"단가와 수량을 입력하세요\")\r\n            return;\r\n        }\r\n\r\n        var date = getDate()\r\n        var time = getTime()\r\n        data.time = time\r\n\r\n        var todaySold = document.querySelector(\"#today-sold\")\r\n        var todaySoldInt = todaySold?.textContent?.toString().replace(/[^0-9]/g,'');\r\n        if(todaySoldInt !== undefined && todaySoldInt !== null){\r\n            setTS(parseInt(todaySoldInt) + totalPrice)\r\n            console.log(todaySoldInt + totalPrice)\r\n            db.collection('wiki').doc('static').collection(date).doc(\"total sales\").set({sold: parseInt(todaySoldInt) + totalPrice})\r\n        }\r\n\r\n        else db.collection('wiki').doc('static').collection(date).doc(\"total sales\").set({sold: 0})\r\n\r\n        // firebase에 저장\r\n        db.collection('wiki')\r\n            .doc('sale')\r\n            .collection(date)\r\n            .doc(time)\r\n            .set({data})\r\n\r\n        //저장이 되었는지 확인 후 reload\r\n        db.collection('wiki')\r\n            .doc('sale')\r\n            .collection(date)\r\n            .doc(time)\r\n            .get()\r\n            .then(\r\n                doc =>{\r\n                    window.location.reload(false)\r\n                }\r\n            )\r\n    }\r\n\r\n    return(\r\n        <Fragment>\r\n                <div style = {{width: \"300px\", display: \"inline-block\"}}>\r\n\r\n                <select id = \"age\" className = \"select_age\" onChange =  {(e)=>{\r\n                    let {name, value} = e.target\r\n                    setAge(value)\r\n                    }}>\r\n                    <option value = \"성인\">성인</option>\r\n                    <option value = \"아동\">아동</option>\r\n                </select>\r\n                \r\n                <select id = \"category\" className = \"category\" onChange =  {(e)=>{\r\n                    let {name, value} = e.target\r\n                    setCategory(value)\r\n                    }}>\r\n                    {cat}\r\n                </select>\r\n\r\n                <InputNumber id = \"price\" placeholder = \"단가를 입력하세요\" onChange = {(e)=>{\r\n                    setPrice(parseInt(e.target.value))\r\n                    setTP(parseInt(e.target.value)*cnt)\r\n                    console.log(price)\r\n                    console.log(cnt)\r\n                    console.log(totalPrice)\r\n                }}></InputNumber>\r\n                <InputNumber id = \"cnt\" placeholder = \"수량을 입력하세요\" onChange = {(e)=>{\r\n                    setCnt(parseInt(e.target.value))\r\n                    setTP(price*parseInt(e.target.value))\r\n                    console.log(price)\r\n                    console.log(cnt)\r\n                    console.log(totalPrice)\r\n                }}></InputNumber>\r\n                <div id = \"totalPrice\" >총 금액: {numberWithCommas(totalPrice)}\r\n                <button id = \"submit\" type = \"submit\" onClick={sendToFirebase}>입력</button>\r\n                </div>\r\n                <div id = \"warnning\">{warnning}</div>\r\n                </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Input","import React, {Component, Fragment, useState} from 'react';\r\nimport {db} from '../App'\r\nimport {getDate} from '../lib/FirebaseData'\r\nimport { renderItem} from './RenderData';\r\nimport { useEffect } from 'react';\r\n\r\nfunction TodayData(date){\r\n    let int = 0\r\n    let data = db.collection('wiki').doc('sale').collection(date.date).get()\r\n     data.then((snapshot:any)=>{\r\n            snapshot.forEach((doc:any)=>{\r\n                int++\r\n                renderItem(doc,int,date.date)\r\n        })\r\n        }\r\n    )\r\n\r\n    \r\n    return (\r\n        <Fragment>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default TodayData","import { db } from \"../App\";\r\nimport { getDate, numberWithCommas } from \"../lib/FirebaseData\";\r\n\r\n\r\nexport function renderItem(doc, int, date){\r\n    const itemList = document.querySelector(\"#item\")\r\n    var todaySold = document.querySelector(\"#today-sold\")\r\n\r\n    var ts = db.collection('wiki').doc('static').collection(date).doc('total sales')\r\n\r\n    let li = document.createElement('tr');\r\n    let number = document.createElement('td')\r\n    let time = document.createElement('td')\r\n    let name = document.createElement('td')\r\n    let cnt = document.createElement('td')\r\n    let price = document.createElement('td')\r\n    let totalPrice = document.createElement('td')\r\n    let del = document.createElement('td')\r\n    let delBtn = document.createElement('button')\r\n\r\n\r\n    li.setAttribute('data-id', doc.id)\r\n\r\n    number.className = \"item-number\"\r\n    time.className = \"item-time\"\r\n    name.className = \"item-name\"\r\n    cnt.className = \"item-cnt\"\r\n    price.className = \"item-price\"\r\n    totalPrice.className = \"item-totalPrice\"\r\n    del.className = \"item-del\"\r\n    delBtn.id = \"item-del\"\r\n\r\n    delBtn.addEventListener(\"click\",btnClick,false)\r\n    async function btnClick(e){\r\n        db.collection('wiki').doc('sale').collection(date).doc(doc.id).delete()\r\n        var beforePrice = await ts.get().then((doc: any) => {\r\n            return doc.data().sold;\r\n        })\r\n        beforePrice -= doc.data().data.totalPrice\r\n        ts.set({sold: beforePrice})\r\n        setTimeout(()=>window.location.reload(),1000)\r\n    }\r\n\r\n    number.textContent = int\r\n    time.textContent = doc.id.slice(0,5)\r\n    name.textContent= doc.data().data.category\r\n    cnt.textContent = doc.data().data.cnt\r\n    price.textContent = numberWithCommas(doc.data().data.price)\r\n    totalPrice.textContent = numberWithCommas(doc.data().data.totalPrice)\r\n    delBtn.textContent=\"X\"\r\n    delBtn.value = doc.id\r\n    if(date === getDate())\r\n        del.appendChild(delBtn)\r\n\r\n    li.appendChild(number)\r\n    li.appendChild(time)\r\n    li.appendChild(name)\r\n    li.appendChild(cnt)\r\n    li.appendChild(price)\r\n    li.appendChild(totalPrice)\r\n    li.appendChild(del)\r\n\r\n    if(int === 0)\r\n    itemList?.appendChild(li)\r\nelse{\r\n    itemList?.insertBefore(li, itemList.firstChild)\r\n}\r\n\r\n\r\n   \r\n    ts.get().then((doc:any)=>{\r\n        if (doc.exists && todaySold&& !isNaN(doc.data().sold)){\r\n            todaySold.textContent= \"총 매출: \" + numberWithCommas(doc.data().sold)\r\n        }\r\n\r\n        else if(todaySold){\r\n            db.collection('wiki').doc('static').collection(date).doc(\"total sales\").set({sold: totalPrice.textContent})\r\n            todaySold.textContent= \"총 매출: \" + totalPrice.textContent\r\n        }\r\n    })\r\n    \r\n\r\n\r\n}\r\n","import React from 'react'\r\nimport {db} from '../App'\r\nimport {getDate, numberWithCommas} from '../lib/FirebaseData'\r\nimport { renderItem} from './RenderData';\r\nimport firebase from 'firebase';\r\n\r\nexport async function RecordCategory(date){\r\n    var ct = new Map()\r\n    var pr = new Map()\r\n    var total = 0;\r\n    console.log(date)\r\n\r\n    let data = await db.collection('wiki').doc('sale').collection(date).get()\r\n    data.forEach((doc:any)=>{\r\n            var category = doc.data().data.category\r\n\r\n            var num = doc.data().data.cnt\r\n            var price = doc.data().data.totalPrice\r\n            total += price\r\n            if(ct.has(category)){\r\n                num = ct.get(category)+num\r\n                price = pr.get(category) + price\r\n                ct.set(category, num) \r\n                pr.set(category, price)\r\n            }\r\n            else{\r\n                ct.set(category,num)\r\n                pr.set(category, price)\r\n        }\r\n    })\r\n\r\n    var sorted = new Map([...pr.entries()].sort((a,b)=>b[1]-a[1]))\r\n\r\n    var categorySold = document.querySelector(\"#category-list\")\r\n\r\n    var int = 1\r\n\r\n    sorted.forEach((value, key)=>{\r\n        let tr = document.createElement('tr')\r\n        let rank = document.createElement('td')\r\n        let name = document.createElement('td')\r\n        let cnt = document.createElement('td')\r\n        let price = document.createElement('td')\r\n\r\n        rank.textContent = int.toString()\r\n        name.textContent = key\r\n        cnt.textContent = numberWithCommas(ct.get(key))\r\n        price.textContent = numberWithCommas(value)\r\n\r\n        tr.appendChild(rank)\r\n        tr.appendChild(name)\r\n        tr.appendChild(price)\r\n        tr.appendChild(cnt)\r\n\r\n        categorySold?.appendChild(tr)\r\n\r\n        int++\r\n    })\r\n\r\n    \r\n    \r\n    console.log(ct)\r\n    console.log(pr)\r\n    console.log(total)\r\n    \r\n\r\n}\r\n","import React, {Fragment} from 'react'\r\nimport Input from '../components/Input'\r\nimport TodayData from '../components/TodayData'\r\nimport {getDate} from '../lib/FirebaseData'\r\nimport logo from './wikimagic1.png'\r\nimport { RecordCategory } from '../components/Category'\r\n\r\nfunction RecordSold(){\r\n  const today: string = getDate()\r\n  \r\n  RecordCategory(today)\r\n\r\n    return(\r\n        <Fragment>\r\n        <img src = {logo} height = \"100px\"/>\r\n        <h2 style={{marginTop:\"2px\", marginBottom: \"5px\", borderBottom:\"5px double rgb(0, 68, 146)\", paddingBottom: \"5px\"}}>{getDate()}</h2>\r\n      <div className = \"input-data\">\r\n        <Input/>\r\n        <p style = {{fontSize:\"20px\", marginTop:\"15px\", marginBottom:\"2px\"}}>--종목별 매출--</p>\r\n        <div style = {{marginLeft: \"10px\"}}>\r\n          <table>\r\n          <thead>\r\n            <tr>\r\n              <th>순위</th><th>카테고리</th><th>판매금액</th><th>수량</th>\r\n            </tr>\r\n          </thead>\r\n          </table>\r\n        <div id = \"category-table-wrap\">\r\n          <table>\r\n          <tbody id = \"category-list\">\r\n          </tbody>\r\n          </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div id = \"content\" >\r\n        <p id=\"today-sold\">총 매출: <TodayData date={today}/></p>\r\n        <table id = \"item-list\">\r\n        <colgroup>\r\n            <col width = \"5%\"></col>\r\n            <col width = \"10%\"></col>\r\n            <col width = \"15%\"></col>\r\n            <col width = \"5%\"></col>\r\n            <col width = \"5%\"></col>\r\n            <col width = \"5%\"></col>\r\n            <col width = \"5%\"></col>\r\n          </colgroup>\r\n          <thead>\r\n            <tr>\r\n              <th>번호</th><th>판매시간</th><th>상품명</th><th>수량</th><th>단가</th><th>총금액</th><th>삭제</th>\r\n            </tr>\r\n          </thead>\r\n          </table>\r\n        <div id = \"table-wrap\">\r\n        <table id = \"item-list\">\r\n          <colgroup>\r\n            <col width = \"5%\"></col>\r\n            <col width = \"10%\"></col>\r\n            <col width = \"15%\"></col>\r\n            <col width = \"5%\"></col>\r\n            <col width = \"5%\"></col>\r\n            <col width = \"5%\"></col>\r\n            <col width = \"5%\"></col>\r\n          </colgroup>\r\n            <tbody id = \"item\">\r\n            </tbody>\r\n        </table>\r\n        </div>\r\n      </div>\r\n        </Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default RecordSold","import React, { Fragment } from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport WritePurchaseRecord from './WritePurchaseRecord'\r\nimport ShowPurchaseRecord from './ShowPurchaseRecord'\r\n\r\nfunction Purchase(){\r\n    return(\r\n        <Fragment>\r\n            <p>\r\n                <Link to = '/write-purchase-record'>구입내역 기록</Link>\r\n            </p>\r\n            <p>    \r\n                <Link to = '/show-purchase-record'>구입내역 조회</Link>\r\n            </p>\r\n        </Fragment>\r\n    )\r\n    \r\n}\r\n\r\nexport default Purchase","import React, { Fragment, useState } from 'react'\r\nimport Calendar from 'rc-calendar';\r\nimport InputNumber from 'react-input-just-numbers';\r\n\r\nfunction WritePurchaseRecord(){\r\n    return(\r\n        <Fragment>\r\n            <Calendar/>\r\n            <div className = \"input-data\">\r\n                <select>\r\n                    <option value = \"a\">카테고리</option>\r\n                </select>\r\n                <select>\r\n                    <option value = \"a\">업체</option>\r\n                </select>\r\n                <InputNumber id = \"price\" placeholder = \"단가를 입력하세요\" onChange = {(e)=>{\r\n\r\n                    }}></InputNumber>\r\n            </div>\r\n            \r\n\r\n            \r\n            <table id = \"item-list\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>품목</th><th>수량</th><th>단가</th><th>총금액</th><th>삭제</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody id = \"item\"></tbody>\r\n            </table>\r\n\r\n            <p>\r\n                <button > 확인</button>\r\n            </p>\r\n        </Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default WritePurchaseRecord","import React, { Fragment } from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction ShowPurchaseRecord(){\r\n    return(\r\n        <Fragment>\r\n            dkdkdkdk\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default ShowPurchaseRecord","import React, { Fragment } from 'react'\r\n\r\nfunction Monthly(){\r\n    return(\r\n        <Fragment>\r\n            <div style={{display:\"inline-block\", width: \"800px\", textAlign:\"center\"}}>\r\n\r\n            {/* <div id = \"category-table-wrap\" style = {{display: \"inline-block\"}}>\r\n            <p>종목별 매출</p>\r\n\r\n            <table id = \"category-list\">\r\n                <thead>\r\n                <tr>\r\n                    <th>순위</th><th>카테고리</th><th>판매금액</th><th>수량</th>\r\n                </tr>\r\n                </thead>\r\n            </table>\r\n\r\n            </div> */}\r\n            </div>\r\n            \r\n\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Monthly;","import React, { Fragment } from 'react'\r\n// import Calendar from 'rc-calendar'\r\nimport Calendar from 'react-calendar'\r\nimport { useState } from 'react'\r\nimport TodayData from '../components/TodayData';\r\nimport { getDate, dateToString } from '../lib/FirebaseData';\r\nimport Monthly from '../components/Monthly';\r\nimport { RecordCategory } from '../components/Category';\r\n\r\nfunction Static(){\r\n    var today = new Date();\r\n    const [date, setDate] = useState(today);\r\n    RecordCategory(dateToString(date))\r\n\r\n    function showSales(date:Date){\r\n        const itemList = document.getElementById(\"item\"); \r\n        if(itemList){\r\n            itemList.innerHTML = \"\";\r\n        }\r\n        setDate(date) \r\n        console.log(date)\r\n\r\n        var categorySold = document.querySelector(\"#category-list\")\r\n        if(categorySold){\r\n            categorySold.innerHTML=\"\"\r\n        }\r\n\r\n        RecordCategory(dateToString(date))\r\n    }\r\n\r\n    return(\r\n    <Fragment>\r\n        <div>\r\n        <Calendar \r\n            onChange ={(date:any)=> showSales(date)} \r\n            value = {date}\r\n            style={{\r\n                display:\"inline-block\", \r\n                margin:\"10px\",\r\n            }}\r\n        />\r\n        <Monthly/>\r\n        </div>\r\n\r\n\r\n       <p id=\"today-sold\">매출: <TodayData date={dateToString(date)}/></p>\r\n        <table id = \"item-list\">\r\n          <thead>\r\n            <tr>\r\n              <th>번호</th><th>판매시간</th><th>상품명</th><th>수량</th><th>단가</th><th>총금액</th><th>삭제</th>\r\n            </tr>\r\n          </thead>\r\n            <tbody id = \"item\"></tbody>\r\n        </table>\r\n    </Fragment>\r\n    )\r\n}\r\n\r\nexport default Static","import React, {Fragment} from 'react';\r\nimport './App.css';\r\nimport firebase from 'firebase'\r\nimport {Route, HashRouter,BrowserRouter, Switch} from 'react-router-dom'\r\nimport RecordSold from './page/SoldRecord';\r\nimport Purchase from './page/Purchase';\r\nimport WritePurchaseRecord from './page/WritePurchaseRecord';\r\nimport ShowPurchaseRecord from './page/ShowPurchaseRecord'\r\nimport Static from './page/Static';\r\nimport 'react-calendar/dist/Calendar.css'\r\n\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAuMUMqkpuvevgi9pu_NM6ZqUBniwvhuQs\",\r\n  authDomain: \"wikimagic-4ce55.firebaseapp.com\",\r\n  databaseURL: \"https://wikimagic-4ce55.firebaseio.com\",\r\n  projectId: \"wikimagic-4ce55\",\r\n  storageBucket: \"wikimagic-4ce55.appspot.com\",\r\n  messagingSenderId: \"999608533978\",\r\n  appId: \"1:999608533978:web:1328133731ac663f2836e3\",\r\n  measurementId: \"G-K3WGGRGWHB\"\r\n}\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\nexport const db = firebase.firestore();\r\n\r\nconst App=()=> {\r\n  return (\r\n    <Fragment>\r\n      <div className = \"App\">\r\n        <HashRouter>\r\n            <Route path = \"/purchase\" component = {Purchase}/>\r\n            <Route path = \"/static\" component = {Static}/>\r\n            <Route path = \"/write-purchase-record\" component = {WritePurchaseRecord}/>\r\n            <Route path = \"/show-purchase-record\" component = {ShowPurchaseRecord}/>\r\n            <Route excat path = \"/home\" component = {RecordSold}/>\r\n        </HashRouter>\r\n      </div>\r\n        \r\n    </Fragment>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/wikimagic1.f04f82f5.png\";"],"sourceRoot":""}