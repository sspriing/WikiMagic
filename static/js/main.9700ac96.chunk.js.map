{"version":3,"sources":["components/Input.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","cat","useState","age","setAge","price","setPrice","category","setCategory","cnt","setCnt","totalPrice","setTP","warnning","setWranning","data","value","id","className","onChange","e","target","name","parseInt","console","log","type","onClick","undefined","date","today","Date","dd","String","getDate","padStart","mm","getMonth","getFullYear","time","now","getHours","getMinutes","getSeconds","getTime","db","collection","doc","set","get","then","window","location","reload","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9700ac96.chunk.js","sourcesContent":["import React, {Component, Fragment, useState} from 'react';\r\nimport {db} from '../App'\r\nimport InputNumber from 'react-input-just-numbers';\r\n\r\nfunction Input(){\r\n    const [age, setAge] = useState(\"adult\");\r\n    const [price, setPrice] = useState(0);\r\n    const [category, setCategory] = useState(\"hat\");\r\n    const [cnt, setCnt] = useState(0);\r\n    const [totalPrice, setTP] = useState(0);\r\n    const [warnning, setWranning] = useState(\"\");\r\n\r\n    let data = {\r\n        age: age,\r\n        category: category,\r\n        price: price,\r\n        cnt: cnt,\r\n        totalPrice: totalPrice\r\n    }\r\n\r\n    var cat\r\n    if(age === \"adult\"){\r\n        cat = \r\n            <Fragment>\r\n                <option value = \"hat\">모자</option>\r\n                <option value = \"socks\">양말</option>\r\n                <option value = \"sunglasses\">선글라스</option>\r\n                <option value = \"hairband\">헤어밴드</option>\r\n                <option value = \"hairpin\">헤어핀</option>\r\n                <option value = \"scarf\">스카프 / 손수건</option>\r\n                <option value = \"clothes\">잠옷</option>\r\n                <option value = \"umbrella\">우양산</option>\r\n                <option value = \"tie\">넥타이</option>\r\n                <option value = \"mask\">마스크 / 마스크줄</option>\r\n            </Fragment>\r\n    }    \r\n    if(age === \"kids\"){\r\n        cat = \r\n        <Fragment>\r\n            <option value = \"hat\">모자</option>\r\n            <option value = \"socks\">양말</option>\r\n            <option value = \"sunglasses\">선글라스</option>\r\n            <option value = \"hairband\">헤어밴드</option>\r\n            <option value = \"hairpin\">헤어핀</option>\r\n            <option value = \"ring\">반지</option>\r\n            <option value = \"bag\">가방</option>\r\n            <option value = \"etc\">기타</option>\r\n        </Fragment>\r\n    }\r\n\r\n    function getDate(): string{\r\n        var today = new Date()\r\n        var dd = String(today.getDate()).padStart(2,'0')\r\n        var mm = String(today.getMonth()+1).padStart(2,'0')\r\n        var yyyy = today.getFullYear();\r\n        return(yyyy+ \"-\"+mm+\"-\"+dd) \r\n    }\r\n    function getTime():string{\r\n        var now = new Date()\r\n        var hh = String(now.getHours()).padStart(2,'0')\r\n        var mm = String(now.getMinutes()).padStart(2,'0')\r\n        var ss = String(now.getSeconds())\r\n        return(hh+\":\"+mm+\":\"+ss)\r\n    }\r\n\r\n    function sendToFirebase(){\r\n        if(price === undefined || cnt === undefined || price ===0 || cnt ===0){\r\n            setWranning(\"단가와 수량을 입력하세요\")\r\n            return;\r\n        }\r\n        var date = getDate()\r\n        var time = getTime()\r\n\r\n        db.collection('wiki')\r\n            .doc('sale')\r\n            .collection(date)\r\n            .doc(time)\r\n            .set({data})\r\n        db.collection('wiki')\r\n            .doc('sale')\r\n            .collection(date)\r\n            .doc(time)\r\n            .get()\r\n            .then(\r\n                doc =>{\r\n                    window.location.reload(false)\r\n                }\r\n            )\r\n    }\r\n\r\n    return(\r\n        <Fragment>\r\n            <div>\r\n                <select id = \"age\" className = \"select_age\" onChange =  {(e)=>{\r\n                    let {name, value} = e.target\r\n                    setAge(value)\r\n                    }}>\r\n                    <option value = \"adult\">성인</option>\r\n                    <option value = \"kids\">아동</option>\r\n                </select>\r\n                \r\n                <select id = \"category\" className = \"category\" onChange =  {(e)=>{\r\n                    let {name, value} = e.target\r\n                    setCategory(value)\r\n                    }}>\r\n                    {cat}\r\n                </select>\r\n\r\n                <InputNumber id = \"price\" onChange = {(e)=>{\r\n                    setPrice(parseInt(e.target.value))\r\n                    setTP(parseInt(e.target.value)*cnt)\r\n                    console.log(price)\r\n                    console.log(cnt)\r\n                    console.log(totalPrice)\r\n                }}></InputNumber>\r\n                <InputNumber id = \"cnt\"  onChange = {(e)=>{\r\n                    setCnt(parseInt(e.target.value))\r\n                    setTP(price*parseInt(e.target.value))\r\n                    console.log(price)\r\n                    console.log(cnt)\r\n                    console.log(totalPrice)\r\n                }}></InputNumber>\r\n                <p id = \"totalPrice\" >{totalPrice}</p>\r\n                <p id = \"warnning\">{warnning}</p>\r\n                <button type = \"submit\" onClick={sendToFirebase}>입력</button>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default Input","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Input from './components/Input'\r\nimport firebase from 'firebase'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAuMUMqkpuvevgi9pu_NM6ZqUBniwvhuQs\",\r\n  authDomain: \"wikimagic-4ce55.firebaseapp.com\",\r\n  databaseURL: \"https://wikimagic-4ce55.firebaseio.com\",\r\n  projectId: \"wikimagic-4ce55\",\r\n  storageBucket: \"wikimagic-4ce55.appspot.com\",\r\n  messagingSenderId: \"999608533978\",\r\n  appId: \"1:999608533978:web:1328133731ac663f2836e3\",\r\n  measurementId: \"G-K3WGGRGWHB\"\r\n}\r\n\r\nfirebase.initializeApp(firebaseConfig)\r\n\r\nexport const db = firebase.firestore();\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      위키매직\r\n      <Input/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}